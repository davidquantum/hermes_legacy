include(PickRealOrCplxLibs)

macro(SET_COMMON_TARGET_PROPERTIES TRGT)
  # Each project can define the particular Hermes library to link with, or not
  # define anything, in which case the "real" version will be used if Hermes was
  # built with "real" support, otherwise the "complex" version will be used:
  if(${ARGC} EQUAL 1)
    if(H2D_REAL)
        set(HERMES ${HERMES2D_REAL})
    else(H2D_REAL)
        set(HERMES ${HERMES2D_CPLX})
    endif(H2D_REAL)
  elseif(${ARGC} EQUAL 2)
    set(HERMES ${ARGV1})    
  endif(${ARGC} EQUAL 1) 
  
  # If the complex version is being used:
  if(H2D_COMPLEX)
    if("${HERMES}" STREQUAL "${HERMES2D_CPLX_DEBUG}")
        set(FLAGS "-DH2D_COMPLEX -DHERMES_COMMON_COMPLEX ${DEBUG_FLAGS}")
        set(HERMES_COMMON ${HERMES_COMMON_LIB_CPLX_DEBUG})
    elseif("${HERMES}" STREQUAL "${HERMES2D_CPLX_RELEASE}")
        set(FLAGS "-DH2D_COMPLEX -DHERMES_COMMON_COMPLEX ${RELEASE_FLAGS}")
        set(HERMES_COMMON ${HERMES_COMMON_LIB_CPLX_RELEASE})
    endif("${HERMES}" STREQUAL "${HERMES2D_CPLX_DEBUG}")
  endif(H2D_COMPLEX)
  # If the real version is being used:
  if(H2D_REAL)
    if("${HERMES}" STREQUAL "${HERMES2D_REAL_DEBUG}")
        set(FLAGS "-DH2D_REAL -DHERMES_COMMON_REAL ${DEBUG_FLAGS}")
        set(HERMES_COMMON ${HERMES_COMMON_LIB_REAL_DEBUG})
    elseif("${HERMES}" STREQUAL "${HERMES2D_REAL_RELEASE}")
        set(FLAGS "-DH2D_REAL -DHERMES_COMMON_REAL ${RELEASE_FLAGS}")
        set(HERMES_COMMON ${HERMES_COMMON_LIB_REAL_RELEASE})
    endif("${HERMES}" STREQUAL "${HERMES2D_REAL_DEBUG}")
  endif(H2D_REAL)
  
  set_property(TARGET ${TRGT} PROPERTY COMPILE_FLAGS ${FLAGS})

  include_directories(${CMAKE_CURRENT_SOURCE_DIR})
  include_directories(${hermes2d_SOURCE_DIR}/src)

  PICK_REAL_OR_CPLX_INCS(${HERMES_COMMON} ${TRGT})

  #target_link_libraries(${TRGT} ${HERMES} ${TRILINOS_LIBRARIES})
  #add_dependencies(${TRGT} ${HERMES})

  # Only linking to the hermes2d library and to those third party shared 
  # libraries that do not stay in some standard system directory 
  # should be needed to build any project outside of Hermes (hermes_common gets
  # found automatically as long as it has been installed e.g. to /usr/local/lib).
  # When the CMake command target_link_libraries is used to link to another 
  # project in current build tree, linking information from that project is 
  # transitively added to the current project (so now we have some unnecessary
  # libraries added to ${TRGT}).
  target_link_libraries(${TRGT} ${HERMES})
  
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake)
    configure_file(
    	${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake
    	${CMAKE_CURRENT_SOURCE_DIR}/config.h
    )
  endif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake)
  # Otherwise hermes_common/config.h will be used

endmacro(SET_COMMON_TARGET_PROPERTIES)
